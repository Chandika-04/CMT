# Generated by Django 2.2.12 on 2020-05-17 17:20

import core.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import forms.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("viewflow", "0008_jsonfield_and_artifact"),
        ("chapters", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Audit",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "year",
                    models.IntegerField(
                        choices=[
                            (2016, 2016),
                            (2017, 2017),
                            (2018, 2018),
                            (2019, 2019),
                            (2020, 2020),
                            (2021, 2021),
                            (2022, 2022),
                            (2023, 2023),
                            (2024, 2024),
                            (2025, 2025),
                            (2026, 2026),
                            (2027, 2027),
                        ],
                        default=2020,
                    ),
                ),
                (
                    "term",
                    models.CharField(
                        choices=[
                            ("fa", "Fall"),
                            ("sp", "Spring"),
                            ("wi", "Winter"),
                            ("su", "Summer"),
                        ],
                        max_length=2,
                    ),
                ),
                ("dues_member", models.FloatField(verbose_name="Member Dues")),
                (
                    "dues_pledge",
                    models.FloatField(
                        verbose_name="Potential New Member Pledging Fees/Dues"
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("month", "month"),
                            ("semester", "semester"),
                            ("quarter", "quarter"),
                            ("year", "year"),
                        ],
                        max_length=10,
                        verbose_name="What is the frequency of member dues",
                    ),
                ),
                ("payment_plan", models.BooleanField()),
                ("cash_book", models.BooleanField()),
                ("cash_register", models.BooleanField()),
                ("member_account", models.BooleanField()),
                ("cash_book_reviewed", models.BooleanField()),
                ("cash_register_reviewed", models.BooleanField()),
                ("member_account_reviewed", models.BooleanField()),
                (
                    "balance_checking",
                    models.FloatField(
                        verbose_name="Balance of chapter checking account"
                    ),
                ),
                (
                    "balance_savings",
                    models.FloatField(
                        verbose_name="Balance of chapter savings account"
                    ),
                ),
                ("debit_card", models.BooleanField()),
                (
                    "debit_card_access",
                    forms.models.MultiSelectField(
                        choices=[
                            ("None", "None"),
                            ("adviser", "Adviser"),
                            ("board member", "Board Member"),
                            ("committee chair", "Committee Chair"),
                            ("corresponding secretary", "Corresponding Secretary"),
                            ("employer/ee", "Employer/Ee"),
                            ("events chair", "Events Chair"),
                            ("faculty adviser", "Faculty Adviser"),
                            ("fundraising chair", "Fundraising Chair"),
                            (
                                "house corporation president",
                                "House Corporation President",
                            ),
                            (
                                "house corporation treasurer",
                                "House Corporation Treasurer",
                            ),
                            ("housing chair", "Housing Chair"),
                            ("other appointee", "Other Appointee"),
                            ("parent", "Parent"),
                            ("pd chair", "Pd Chair"),
                            (
                                "pledge/new member educator",
                                "Pledge/New Member Educator",
                            ),
                            ("project chair", "Project Chair"),
                            ("recruitment chair", "Recruitment Chair"),
                            ("regent", "Regent"),
                            ("risk management chair", "Risk Management Chair"),
                            ("rube goldberg chair", "Rube Goldberg Chair"),
                            ("scholarship chair", "Scholarship Chair"),
                            ("scribe", "Scribe"),
                            ("service chair", "Service Chair"),
                            ("social/brotherhood chair", "Social/Brotherhood Chair"),
                            ("treasurer", "Treasurer"),
                            ("vice regent", "Vice Regent"),
                            (
                                "website/social media chair",
                                "Website/Social Media Chair",
                            ),
                        ],
                        max_length=447,
                        verbose_name="Which members have access to the chapter debit card? Select all that apply.",
                    ),
                ),
                ("agreement", models.BooleanField()),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="Badge",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("code", models.CharField(max_length=50)),
                ("description", models.CharField(max_length=500)),
                (
                    "cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Cost of item.",
                        max_digits=7,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChapterReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "year",
                    models.IntegerField(
                        choices=[
                            (2016, 2016),
                            (2017, 2017),
                            (2018, 2018),
                            (2019, 2019),
                            (2020, 2020),
                            (2021, 2021),
                            (2022, 2022),
                            (2023, 2023),
                            (2024, 2024),
                            (2025, 2025),
                            (2026, 2026),
                            (2027, 2027),
                        ],
                        default=2020,
                    ),
                ),
                (
                    "term",
                    models.CharField(
                        choices=[
                            ("fa", "Fall"),
                            ("sp", "Spring"),
                            ("wi", "Winter"),
                            ("su", "Summer"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "report",
                    models.FileField(
                        upload_to=forms.models.get_chapter_report_upload_path
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="Convention",
            fields=[
                (
                    "process_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="viewflow.Process",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        choices=[
                            (2016, 2016),
                            (2017, 2017),
                            (2018, 2018),
                            (2019, 2019),
                            (2020, 2020),
                            (2021, 2021),
                            (2022, 2022),
                            (2023, 2023),
                            (2024, 2024),
                            (2025, 2025),
                            (2026, 2026),
                            (2027, 2027),
                        ],
                        default=2020,
                    ),
                ),
                (
                    "term",
                    models.CharField(
                        choices=[
                            ("fa", "Fall"),
                            ("sp", "Spring"),
                            ("wi", "Winter"),
                            ("su", "Summer"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "meeting_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        validators=[core.models.no_future],
                    ),
                ),
                (
                    "understand_del",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name='I have read and understand the "Convention Expenses" and the "Alcohol Policy\n        for National Meetings" policies in the Theta Tau Policies and Procedures Manual.',
                    ),
                ),
                (
                    "understand_alt",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name='I have read and understand the "Convention Expenses" and the "Alcohol Policy\n        for National Meetings" policies in the Theta Tau Policies and Procedures Manual.',
                    ),
                ),
                (
                    "signature_del",
                    models.CharField(
                        help_text="Please sign using your proper/legal name",
                        max_length=255,
                    ),
                ),
                (
                    "signature_alt",
                    models.CharField(
                        help_text="Please sign using your proper/legal name",
                        max_length=255,
                    ),
                ),
                (
                    "signature_o1",
                    models.CharField(
                        help_text="Please sign using your proper/legal name",
                        max_length=255,
                    ),
                ),
                (
                    "signature_o2",
                    models.CharField(
                        help_text="Please sign using your proper/legal name",
                        max_length=255,
                    ),
                ),
                (
                    "approved_o1",
                    models.BooleanField(
                        choices=[(True, "Approve"), (False, "Deny")],
                        default=False,
                        verbose_name="Officer Approved",
                    ),
                ),
                (
                    "approved_o2",
                    models.BooleanField(
                        choices=[(True, "Approve"), (False, "Deny")],
                        default=False,
                        verbose_name="Officer Approved",
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=("viewflow.process", models.Model),
        ),
        migrations.CreateModel(
            name="Depledge",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("volunteer", "Voluntarily decided not to continue"),
                            ("time", "Too much time required"),
                            ("grades", "Poor grades"),
                            ("interest", "Lost interest"),
                            ("vote", "Negative Chapter Vote"),
                            ("withdrew", "Withdrew from Engineering/University"),
                            ("transfer", "Transferring to another school"),
                            ("other", "Other"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Depledge Date"
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="Guard",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("code", models.CharField(max_length=50)),
                (
                    "letters",
                    models.IntegerField(choices=[(1, "one"), (2, "two")], default=1),
                ),
                ("description", models.CharField(max_length=500)),
                (
                    "cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Cost of item.",
                        max_digits=7,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Initiation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "date_graduation",
                    models.DateField(default=django.utils.timezone.now),
                ),
                (
                    "date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        verbose_name="Initiation Date",
                    ),
                ),
                ("roll", models.PositiveIntegerField(default=999999999)),
                ("gpa", models.FloatField()),
                (
                    "test_a",
                    models.IntegerField(
                        validators=[django.core.validators.MaxValueValidator(100)]
                    ),
                ),
                (
                    "test_b",
                    models.IntegerField(
                        validators=[django.core.validators.MaxValueValidator(100)]
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="InitiationProcess",
            fields=[
                (
                    "process_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="viewflow.Process",
                    ),
                ),
                (
                    "invoice",
                    models.PositiveIntegerField(
                        default=999999999, verbose_name="Invoice Number"
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=("viewflow.process",),
        ),
        migrations.CreateModel(
            name="OSM",
            fields=[
                (
                    "process_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="viewflow.Process",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        choices=[
                            (2016, 2016),
                            (2017, 2017),
                            (2018, 2018),
                            (2019, 2019),
                            (2020, 2020),
                            (2021, 2021),
                            (2022, 2022),
                            (2023, 2023),
                            (2024, 2024),
                            (2025, 2025),
                            (2026, 2026),
                            (2027, 2027),
                        ],
                        default=2020,
                    ),
                ),
                (
                    "term",
                    models.CharField(
                        choices=[
                            ("fa", "Fall"),
                            ("sp", "Spring"),
                            ("wi", "Winter"),
                            ("su", "Summer"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "meeting_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        validators=[core.models.no_future],
                    ),
                ),
                (
                    "selection_process",
                    models.TextField(
                        verbose_name="How was the Chapter Outstanding Student Member chosen? What process was used to select them?"
                    ),
                ),
                (
                    "approved_o1",
                    models.BooleanField(
                        choices=[(True, "Approve"), (False, "Deny")],
                        default=False,
                        verbose_name="Officer Approved",
                    ),
                ),
                (
                    "approved_o2",
                    models.BooleanField(
                        choices=[(True, "Approve"), (False, "Deny")],
                        default=False,
                        verbose_name="Officer Approved",
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=("viewflow.process", models.Model),
        ),
        migrations.CreateModel(
            name="Pledge",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "signature",
                    models.CharField(
                        help_text="Please sign using your proper/legal name",
                        max_length=255,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        choices=[
                            ("mr", "Mr."),
                            ("miss", "Miss"),
                            ("ms", "Ms"),
                            ("mrs", "Mrs"),
                        ],
                        max_length=5,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=30, verbose_name="Legal First Name"),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="Full Middle Name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(max_length=30, verbose_name="Legal Last Name"),
                ),
                (
                    "suffix",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        verbose_name="Suffix (such as Jr., III)",
                    ),
                ),
                (
                    "nickname",
                    models.CharField(
                        blank=True,
                        help_text="If different than your first name - eg Buddy, Skip, or Mike. Do NOT indicate 'pledge names'",
                        max_length=30,
                    ),
                ),
                (
                    "parent_name",
                    models.CharField(
                        max_length=60, verbose_name="Parent / Guardian Name"
                    ),
                ),
                (
                    "email_school",
                    models.EmailField(
                        help_text="We will send an acknowledgement message. (ends in .edu)",
                        max_length=254,
                        verbose_name="School Email",
                    ),
                ),
                (
                    "email_personal",
                    models.EmailField(
                        help_text="Personal email address like @gmail.com, @yahoo.com, @outlook.com, etc",
                        max_length=254,
                        verbose_name="Personal Email",
                    ),
                ),
                (
                    "phone_mobile",
                    models.CharField(
                        help_text="Format: 9999999999 no spaces, dashes, etc.",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Mobile Phone",
                    ),
                ),
                (
                    "phone_home",
                    models.CharField(
                        help_text="Format: 9999999999 no spaces, dashes, etc.",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Home Phone",
                    ),
                ),
                ("birth_date", models.DateField()),
                (
                    "birth_place",
                    models.CharField(
                        help_text="City and state or province is sufficient",
                        max_length=50,
                        verbose_name="Place of Birth",
                    ),
                ),
                (
                    "grad_date_year",
                    models.IntegerField(
                        help_text="The year closest to your expected date of graduation in YYYY format.",
                        validators=[core.models.validate_year],
                        verbose_name="Expected date of graduation",
                    ),
                ),
                (
                    "other_degrees",
                    models.CharField(
                        blank=True,
                        help_text="Name of Major/Field of that Degree. If none, leave blank",
                        max_length=60,
                        verbose_name="College degrees already received",
                    ),
                ),
                (
                    "relative_members",
                    models.CharField(
                        blank=True,
                        help_text="Include relationship, chapter, and graduation year, if known. If none, leave blank",
                        max_length=60,
                        verbose_name="Indicate the names of any relatives you have who are members of Theta Tau below",
                    ),
                ),
                (
                    "other_greeks",
                    models.CharField(
                        blank=True,
                        help_text="If none, leave blank",
                        max_length=60,
                        verbose_name="Of which Greek Letter Honor Societies are you a member?",
                    ),
                ),
                (
                    "other_tech",
                    models.CharField(
                        blank=True,
                        help_text="If none, leave blank",
                        max_length=60,
                        verbose_name="Of which technical societies are you a member?",
                    ),
                ),
                (
                    "other_frat",
                    models.CharField(
                        blank=True,
                        help_text="Other than Theta Tau -- If no other, leave blank",
                        max_length=60,
                        verbose_name="Of which fraternities are you a member?",
                    ),
                ),
                (
                    "other_college",
                    models.CharField(
                        blank=True,
                        max_length=60,
                        verbose_name="Which? (Other college(s))",
                    ),
                ),
                (
                    "explain_expelled_org",
                    models.TextField(
                        blank=True, verbose_name="If yes, please explain."
                    ),
                ),
                (
                    "explain_expelled_college",
                    models.TextField(
                        blank=True, verbose_name="If yes, please explain."
                    ),
                ),
                (
                    "explain_crime",
                    models.TextField(
                        blank=True, verbose_name="If yes, please explain."
                    ),
                ),
                (
                    "loyalty",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="The purpose of Theta Tau shall be to develop and maintain a high standard of professional interest among its members and to unite them in a strong bond of fraternal fellowship. The members are pledged to help one another professionally and personally in a practical way, as students and as alumni, advising as to opportunities for service and advancement, warning against unethical practices and persons. Do you believe that such a fraternity is entitled to your continued support and loyalty?",
                    ),
                ),
                (
                    "not_honor",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="Theta Tau is a fraternity, not an honor society. It aims to elect no one to any class of membership solely in recognition of his scholastic or professional achievements. Do you subscribe to this doctrine?",
                    ),
                ),
                (
                    "accountable",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="Do you understand, if you become a member of Theta Tau, that the other members will have the right to hold you accountable for your conduct? Do you further understand that the Fraternity has Risk Management policies (hazing, alcohol, etc) with which you are expected to comply and to which you should expect others to comply?",
                    ),
                ),
                (
                    "life",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="When you assume the oaths or obligations required during initiation, will you agree that they are binding on the member for life?",
                    ),
                ),
                (
                    "unlawful",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="Do you promise that you will not permit the use of a Theta Tau headquarters or meeting place for unlawful purposes?",
                    ),
                ),
                (
                    "unlawful_org",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="This Fraternity requires of its initiates that they shall not be members of any sect or organization which teaches or practices activities in violation of the laws of the state or the nation. Do you subscribe to this requirement?",
                    ),
                ),
                (
                    "brotherhood",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="The strength of the Fraternity depends largely on the character of its members and the close and loyal friendship uniting them. Do you realize you have no right to join if you do not act on this belief?",
                    ),
                ),
                (
                    "engineering",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="Theta Tau is an engineering fraternity whose student membership is limited to those regularly enrolled in a course leading to a degree in an approved engineering curriculum. Members of other fraternities that restrict their membership to any, or several engineering curricula are generally not eligible to Theta Tau, nor may our members join such fraternities. Engineering honor societies such as Tau Beta Pi, Eta Kappa Nu, etc., are not included in this classification. Do you fully understand and subscribe to that policy?",
                    ),
                ),
                (
                    "engineering_grad",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="Is it your intention to practice engineering after graduation?",
                    ),
                ),
                (
                    "payment",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="The Fraternity has a right to demand from you prompt payment of bills. Do you understand, and are you ready to accept, the financial obligations of becoming a member?",
                    ),
                ),
                (
                    "attendance",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="The Fraternity has a right to demand from you regular attendance at meetings and faithful performance of duties entrusted to you. Are you ready to accept such obligations?",
                    ),
                ),
                (
                    "harmless",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="Do you agree hereby to fully and completely release, discharge, and hold harmless the Chapter, House Corporation, Theta Tau (the national Fraternity), and their respective members, officers, agents, and any other entity whose liability is derivative by or through said released parties from all past, present and future claims, causes of action and liabilities of any nature whatsoever, regardless of the cause of the damage or loss, and including, but not limited to, claims and losses covered by insurance, claims and damages for property, for personal injury, for premises liability, for torts of any nature, and claims for compensatory damages, consequential damages or punitive/exemplary damages? Your affirmative answer binds you, under covenant, not to sue any of the previously named entities.",
                    ),
                ),
                (
                    "alumni",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="As an alumnus, you should join with other alumni in the formation and support of alumni clubs or associations. Furthermore, on October 15th of each year, celebrations are held throughout the country to recall the founding of our Fraternity and to honor the Founders. Members of Theta Tau are encouraged to send some form of greeting to their chapters on or about October 15th. If several members are located in the same vicinity they could gather for an informal meeting. Will you endeavor to do these things, as circumstances permit, after you are initiated into Theta Tau?",
                    ),
                ),
                (
                    "honest",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="My answers to these questions are my honest and sincere convictions.",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="PledgeForm",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, verbose_name="Pledge Name")),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PledgeProcess",
            fields=[
                (
                    "process_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="viewflow.Process",
                    ),
                ),
                (
                    "invoice",
                    models.PositiveIntegerField(
                        default=999999999, verbose_name="Invoice Number"
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=("viewflow.process",),
        ),
        migrations.CreateModel(
            name="PledgeProgram",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "year",
                    models.IntegerField(
                        choices=[
                            (2016, 2016),
                            (2017, 2017),
                            (2018, 2018),
                            (2019, 2019),
                            (2020, 2020),
                            (2021, 2021),
                            (2022, 2022),
                            (2023, 2023),
                            (2024, 2024),
                            (2025, 2025),
                            (2026, 2026),
                            (2027, 2027),
                        ],
                        default=2020,
                    ),
                ),
                (
                    "term",
                    models.CharField(
                        choices=[
                            ("fa", "Fall"),
                            ("sp", "Spring"),
                            ("wi", "Winter"),
                            ("su", "Summer"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "remote",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        verbose_name="Have you or will you conduct your new member education remotely?",
                    ),
                ),
                (
                    "date_complete",
                    models.DateField(
                        default=django.utils.timezone.now,
                        verbose_name="When did you/do you anticipate completing new member education?",
                    ),
                ),
                (
                    "date_initiation",
                    models.DateField(
                        default=django.utils.timezone.now,
                        verbose_name="When did you/do you plan to initiate your pledges?",
                    ),
                ),
                (
                    "weeks",
                    models.PositiveIntegerField(
                        default=0,
                        verbose_name="How many weeks is your typical new member education program?",
                    ),
                ),
                (
                    "weeks_left",
                    models.PositiveIntegerField(
                        default=0,
                        verbose_name="How many weeks of new member education do you have yet to complete?",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("none", ""),
                            (
                                "initiated",
                                "We completed new member education and initiated our pledges.",
                            ),
                            (
                                "still_initiate",
                                "We completed new member education and voted, we just have to initiate our pledges.",
                            ),
                            (
                                "still_vote",
                                "We completed new member education but we still need to vote and initiate our pledges.",
                            ),
                            (
                                "not_complete",
                                "We did not complete new member education.",
                            ),
                        ],
                        default="none",
                        max_length=20,
                        verbose_name="What is the current status of your new member education?",
                    ),
                ),
                (
                    "manual",
                    models.CharField(
                        choices=[
                            ("basic", "Basic"),
                            ("nontrad", "Non-traditional"),
                            ("standard", "Standard"),
                            ("other", "Other"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "other_manual",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=forms.models.get_pledge_program_upload_path,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PrematureAlumnus",
            fields=[
                (
                    "process_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="viewflow.Process",
                    ),
                ),
                (
                    "form",
                    models.FileField(
                        upload_to=forms.models.get_premature_alumn_upload_path
                    ),
                ),
                (
                    "good_standing",
                    models.BooleanField(
                        default=False,
                        verbose_name="Member is in good standing of Theta Tau.",
                    ),
                ),
                (
                    "financial",
                    models.BooleanField(
                        default=False,
                        verbose_name="Member has no current financial obligation to the chapter.",
                    ),
                ),
                (
                    "semesters",
                    models.BooleanField(
                        default=False,
                        verbose_name="Member has completed at least 2 semesters of active membership.",
                    ),
                ),
                (
                    "lifestyle",
                    models.BooleanField(
                        default=False,
                        verbose_name="Member has had a significant lifestyle change preventing adequately & responsibly fulfilling duties & obligations.",
                    ),
                ),
                (
                    "consideration",
                    models.BooleanField(
                        default=False,
                        verbose_name="I understand that this status change request is submitted to the Executive Director for consideration.",
                    ),
                ),
                (
                    "prealumn_type",
                    models.CharField(
                        choices=[
                            (
                                "less4",
                                "Undergraduate Student (initiated into Theta Tau less than four years ago.)",
                            ),
                            (
                                "more4",
                                "Undergraduate Student initiated into Theta Tau 4 or more years ago.",
                            ),
                            (
                                "grad",
                                "Student in Graduate school at the school where initiated as an undergraduate.",
                            ),
                        ],
                        default="less4",
                        max_length=10,
                        verbose_name="Type of Premature (“Early”) Alumnus Status",
                    ),
                ),
                (
                    "approved_exec",
                    models.BooleanField(
                        default=False, verbose_name="Executive Director Approved"
                    ),
                ),
                (
                    "exec_comments",
                    models.TextField(
                        blank=True, verbose_name="If rejecting, please explain why."
                    ),
                ),
                (
                    "vote",
                    models.BooleanField(
                        default=False,
                        verbose_name="The status change for the member was approved by a four-fifths favorable vote of the chapter.",
                    ),
                ),
            ],
            options={"abstract": False,},
            bases=("viewflow.process",),
        ),
        migrations.CreateModel(
            name="RiskManagement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        choices=[
                            (2016, 2016),
                            (2017, 2017),
                            (2018, 2018),
                            (2019, 2019),
                            (2020, 2020),
                            (2021, 2021),
                            (2022, 2022),
                            (2023, 2023),
                            (2024, 2024),
                            (2025, 2025),
                            (2026, 2026),
                            (2027, 2027),
                        ],
                        default=2020,
                    ),
                ),
                (
                    "term",
                    models.CharField(
                        choices=[
                            ("fa", "Fall"),
                            ("sp", "Spring"),
                            ("wi", "Winter"),
                            ("su", "Summer"),
                        ],
                        max_length=2,
                    ),
                ),
                ("role", models.CharField(max_length=50)),
                (
                    "date",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Submit Date"
                    ),
                ),
                ("alcohol", models.BooleanField()),
                ("hosting", models.BooleanField()),
                ("monitoring", models.BooleanField()),
                ("member", models.BooleanField()),
                ("officer", models.BooleanField()),
                ("abusive", models.BooleanField()),
                ("hazing", models.BooleanField()),
                ("substances", models.BooleanField()),
                ("high_risk", models.BooleanField()),
                ("transportation", models.BooleanField()),
                ("property_management", models.BooleanField()),
                ("guns", models.BooleanField()),
                ("trademark", models.BooleanField()),
                ("social", models.BooleanField()),
                ("indemnification", models.BooleanField()),
                ("agreement", models.BooleanField()),
                ("electronic_agreement", models.BooleanField()),
                ("photo_release", models.BooleanField(default=False)),
                ("arbitration", models.BooleanField(default=False)),
                ("dues", models.BooleanField(default=False)),
                ("terms_agreement", models.BooleanField()),
                ("typed_name", models.CharField(max_length=255)),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="StatusChange",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("graduate", "Member is graduating"),
                            ("coop", "Member is going on CoOp or Study abroad"),
                            ("military", "Member is being deployed"),
                            ("withdraw", "Member is withdrawing from school"),
                            ("transfer", "Member is transferring to another school"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "degree",
                    models.CharField(
                        choices=[
                            ("bs", "Bachelor of Science"),
                            ("ms", "Master of Science"),
                            ("mba", "Master of Business Administration"),
                            ("phd", "Doctor of Philosophy"),
                            ("ba", "Bachelor of Arts"),
                            ("ma", "Master of Arts"),
                            ("me", "Master of Engineering"),
                        ],
                        max_length=4,
                    ),
                ),
                (
                    "date_start",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Start Date"
                    ),
                ),
                (
                    "date_end",
                    models.DateField(
                        blank=True, default=core.models.forever, verbose_name="End Date"
                    ),
                ),
                ("employer", models.CharField(max_length=200)),
                (
                    "miles",
                    models.PositiveIntegerField(
                        default=0, help_text="Miles from campus."
                    ),
                ),
                (
                    "email_work",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "new_school",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transfers",
                        to="chapters.Chapter",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
    ]
