# Generated by Django 2.0.3 on 2018-08-31 01:15
from django.db import migrations
from django.utils.text import slugify


def scores_2018(apps, schema_editor):
    """
    Updates from the 2018 National Convention described here:
    https://docs.google.com/document/d/1J3kaIlbCMmkYybQIyA1Ir4yBjlrxXHv4XD_sKQ9uBvs/edit
    """
    score = apps.get_model("scores", "ScoreType")
    # Add in service activities and a service hour calculation that awards total hours
    score_obj = score.objects.get(name="Community Service Hours")
    score_obj.points = 50
    score_obj.formula = "50 * [total hours / (# brothers * 16)]"
    score_obj.special = "50*(HOURS/(MEMBERS*16))"
    score_obj.save()
    score_obj = score(
        id=31,
        name="Community Service Activity",
        description="Members can complete service hours with organized events for the chapter.",
        section="Ser",
        points=50,
        term_points=50,
        formula="20 * (% Attendance)",
        slug=slugify("Service Activity"),
        type="Evt",
        base_points=0,
        attendance_multiplier=20.0,
        stem_add=0,
        member_add=0,
        alumni_add=0,
        guest_add=0,
        special="",
    )
    score_obj.save()
    # Remove Points per semester limits from:
    # Joint Prodev events; Professional development event (open to public); Brotherhood activity for alumni
    score_obj = score.objects.get(slug=slugify("Prodev Joint"))
    score_obj.term_points = score_obj.points
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Prodev Open"))
    score_obj.term_points = score_obj.points
    score_obj.formula = "2 per non-member"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Alumni Active"))
    score_obj.term_points = score_obj.points
    score_obj.name = "Brotherhood Activity for Alumni"
    #  Add cliff to determine score for alumni event of at least 5 alumni members before score increase.
    score_obj.formula = "10 * (% Attendance) + 1 per alumni (5+ alumni)"
    score_obj.save()
    # Sum number initiated, pledged, graduated over a year and determine percentages/ratios accordingly.
    score_obj = score.objects.get(slug=slugify("Pledge Ratio"))
    score_obj.formula = "10 * (# Initiated / # Pledged) for the year"
    score_obj.term_points = score_obj.points
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Membership"))
    score_obj.formula = "50*(MEMBERS*IN)/(2*OUT)"
    score_obj.term_points = score_obj.points
    score_obj.save()
    # Remove “/” and say “per” when appropriate; Rename “Alumni Active brotherhood activity” to
    # “Brotherhood activity for alumni”; Annual report review; National scholarship application submission;
    # Participation in other school/community organizations
    score_obj = score.objects.get(slug=slugify("Hall of Fame"))
    score_obj.formula = "10 per submission"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("OSM"))
    score_obj.formula = "10 per submission"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Audit"))
    score_obj.formula = "5 per audit"
    score_obj.save()
    score_obj = score.objects.get(slug='scholarship-app')
    score_obj.formula = "2 per member submitting scholarship application"
    score_obj.name = "National Scholarship Application Submissions"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Conference"))
    score_obj.formula = "5 per member"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Awards"))
    score_obj.formula = "15 per submission"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Newsletter"))
    score_obj.formula = "5 per submission"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Report"))
    score_obj.formula = "5 per inspection by RD"
    score_obj.name = "Annual Report Review"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Regionals"))
    score_obj.formula = "1 per member (20 per semester for one regionals or year regions)"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Article"))
    score_obj.formula = "10 per submission"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Societies"))
    score_obj.description = "Participation in other school/community organizations"
    score_obj.formula = "10 * (% Participating) + (2 per officer)"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Project"))
    score_obj.formula = "20 per submission of pictures and gear article (does not count as a gear article)"
    score_obj.save()
    score_obj = score.objects.get(slug=slugify("Habitat"))
    score_obj.formula = "50 per member OR\n50 chapter participation locally (5+ members)"
    score_obj.save()


def delete(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('scores', '0004_auto_20180808_2207'),
    ]

    operations = [
        migrations.RunPython(scores_2018, delete),
    ]
