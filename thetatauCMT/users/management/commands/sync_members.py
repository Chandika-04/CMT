# Generated by Django 2.0.3 on 2018-06-15 18:31
import io
import os
import csv
import re
import datetime
import warnings
from django.core.management import BaseCommand
from django.utils import timezone
from django.conf import settings
from users.models import User, UserRoleChange, UserStatusChange
from core.models import ALL_OFFICERS
from chapters.models import Chapter
from pydrive.drive import GoogleDrive
from pydrive.auth import GoogleAuth, AuthenticationError


class Command(BaseCommand):
    # Show this when the user types help
    help = "Sync members with an export from the CRM from central"

    # A command must define handle()
    def handle(self, *args, **options):
        id_file = os.path.join(settings.ROOT_DIR.root, r'secrets/GoogleSheetsClient_id.json')
        id_file_out = os.path.join(settings.ROOT_DIR.root, r'secrets/GoogleSheetsClient_id_out.json')
        GoogleAuth.DEFAULT_SETTINGS['client_config_file'] = id_file
        GoogleAuth.DEFAULT_SETTINGS['save_credentials_backend'] = 'file'
        GoogleAuth.DEFAULT_SETTINGS['save_credentials'] = True
        GoogleAuth.DEFAULT_SETTINGS['save_credentials_file'] = id_file_out
        GoogleAuth.DEFAULT_SETTINGS['oauth_scope'].append(
            'https://www.googleapis.com/auth/drive.file')
        GAUTH = GoogleAuth()
        GAUTH.LocalWebserverAuth()
        DRIVE = GoogleDrive(GAUTH)
        FOLDER_ID = '0BwvK5gYQ6D4nV0pNSnlhd1Z5Z2M'
        results = DRIVE.ListFile({
            'q': f"'{FOLDER_ID}' in parents"}).GetList()
        items = results
        if not items:
            print('No files found in folder.')
            return
        last_date = datetime.datetime.today() - datetime.timedelta(days=30)
        for item in items:
            file_name = item['title']
            if file_name.startswith('2'):
                this_date = datetime.datetime.strptime(file_name[:8], '%Y%m%d')
                if this_date > last_date:
                    last_date = this_date
                    final_file = file_name
                    file = item
            print(f"{file_name} ({file})")
        print(f"Found file: {final_file} id: {file}")
        content = file.GetContentString(mimetype='text/csv', encoding='latin_1')
        reader = csv.DictReader(io.StringIO(content))
        trans = {
            'badge2': 'Constituent Specific Attributes ChapRoll Description',
            'badge': 'Constituent ID',
            'chapter': 'Constituent Specific Attributes Chapter Name Description',
            'roll': 'Constituent Specific Attributes Roll Number Description',
            'status': 'Constituency Code',
            'first': 'First Name',
            'middle': 'Middle Name',
            'last': 'Last Name',
            'phone': 'Mobile Phone Number',
            'email': 'Email Address Number',
            'school': 'Primary Education School Name',
            'major': 'Constituent Specific Attributes y_Major Description',
            'grad': 'Primary Education Class of',
            'start': 'Organization Relation From Date',
            'end': 'Organization Relation To Date',
            'role': 'Organization Relation Relationship',
            'role2': 'Organization Relation Position'}
        for id_obj, row in enumerate(reader):
            user_id = row[trans['badge']]
            if user_id.startswith('UA'):
                user_id = user_id.replace('UA', 'Albany')
            try:
                user_obj = User.objects.get(user_id=user_id)
            except User.DoesNotExist:
                # Maybe the user was a pledge last? Let's get by email
                try:
                    user_obj = User.objects.get(username=row[trans['email']])
                    check_badge = True
                except User.DoesNotExist:
                    try:
                        # Maybe something has been mixed up and the badge2 is right?
                        user_obj = User.objects.get(user_id=row[trans['badge2']])
                    except User.DoesNotExist:
                        user_obj = None
            phone = row[trans['phone']]
            if phone != "" and 'x' not in phone and (8 < len(phone) < 18):
                rep = {"_": "", "(": "", ")": " ", "-": "", ' ': '', '1 ': '', '+': '', " ": ""}
                rep = dict((re.escape(k), v) for k, v in rep.items())
                pattern = re.compile("|".join(rep.keys()))
                phone = pattern.sub(lambda m: rep[re.escape(m.group(0))], phone)
                phone = phone.replace(" ", "")
                try:
                    phone = int(phone)
                except ValueError:
                    phone = ''
            else:
                phone = ''
            if row[trans['grad']]:
                graduation = int(row[trans['grad']])
            else:
                graduation = datetime.date.today().year + 1
            try:
                chapter_obj = Chapter.objects.get(name=row[trans['chapter']])
            except Chapter.DoesNotExist:
                chapter_obj = Chapter.objects.get(school=row[trans['school']])
            if row[trans['email']] == '':
                warnings.warn(f"No email for user: {row}")
                continue
            roll = row[trans['roll']]
            if roll == '':
                # This is likely a pledge, need to get value from badge
                # This is b/c colonies have auto added char abbreviation
                roll = user_id
                roll = ''.join([s for s in list(roll) if s.isdigit()])
                if roll:
                    roll = int(roll)
            if user_obj is None:
                print(f"No user found create one now: {row}")
                user_obj = User(
                    username=row[trans['email']],
                    first_name=row[trans['first']],
                    last_name=row[trans['last']],
                    email=row[trans['email']],
                    name=row[trans['first']] + ' ' + row[trans['last']],
                    badge_number=roll,
                    major=row[trans['major']],
                    graduation_year=graduation,
                    phone_number=phone,
                    chapter=chapter_obj,
                )
                user_obj.save()
            else:
                user_obj.email = row[trans['email']]
                user_obj.phone_number = phone
                user_obj.major = row[trans['major']]
                user_obj.graduation_year = graduation
                if check_badge:
                    if user_obj.user_id != user_id:
                        user_obj.user_id = f"{chapter_obj.greek}{roll}"
                        user_obj.badge_number = roll
                user_obj.save()
            status = row[trans['status']]
            if 'pledge' in status:
                status = 'pnm'
            else:
                status = 'student'
            try:
                status_obj = UserStatusChange.objects.get(
                    user=user_obj,
                    status=status
                )
            except UserStatusChange.DoesNotExist:
                print(f"New status for user {user_obj} {status}")
                status_obj = UserStatusChange(
                    user=user_obj,
                    status=status,
                    start=timezone.now(),
                    end=datetime.datetime(graduation, 7, 1)
                )
                status_obj.save()
            else:
                # status_obj.start = timezone.now(),
                status_obj.end = str(datetime.datetime(graduation, 7, 1))
                status_obj.save()
            if row[trans['role']] != '':
                if row[trans['start']] == '':
                    start = timezone.now()
                else:
                    start = datetime.datetime.strptime(row[trans['start']], '%m/%d/%Y')
                if row[trans['end']] == '':
                    end = timezone.now() + timezone.timedelta(days=90)
                else:
                    end = datetime.datetime.strptime(row[trans['end']], '%m/%d/%Y')
                final_role = row[trans['role']].lower()
                if final_role not in ALL_OFFICERS:
                    # Find the best matching name
                    if 'employer' in final_role:
                        final_role = 'employer/ee'
                        user_obj.employer_position = row[trans['role2']]
                    elif 'alumni' in final_role:
                        final_role = 'adviser'
                    else:
                        warnings.warn(f"Role {final_role} does not exist!")
                        continue
                try:
                    # We need to check if similar role already exists
                    role_obj = UserRoleChange.objects.get(
                        user=user_obj,
                        role=final_role)
                except UserRoleChange.DoesNotExist:
                    role_obj = None
                except UserRoleChange.MultipleObjectsReturned:
                    try:
                        # See if same start will narrow down
                        role_obj = UserRoleChange.objects.get(
                            user=user_obj,
                            role=final_role,
                            start=start)
                    except UserRoleChange.DoesNotExist:
                        role_obj = None
                    except UserRoleChange.MultipleObjectsReturned:
                        try:
                            role_obj = UserRoleChange.objects.get(
                                user=user_obj,
                                role=final_role,
                                start=start,
                                end=end)
                            continue
                        except UserRoleChange.DoesNotExist:
                            role_obj = None
                        except UserRoleChange.MultipleObjectsReturned:
                            continue
                if role_obj is None:
                    print(f"New role for user {user_obj} {final_role}")
                    role_obj = UserRoleChange(
                        user=user_obj,
                        role=final_role,
                        start=start,
                        end=end
                    )
                    role_obj.save()
                else:
                    role_obj.start = start
                    role_obj.end = end
                    role_obj.save()
