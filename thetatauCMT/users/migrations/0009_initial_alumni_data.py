# Generated by Django 2.0.3 on 2018-07-26 03:37
import datetime
from django.db import migrations
from django.utils import timezone
from csv import DictReader
from django.contrib.auth.models import Group


def load_alumni(apps, schema_editor):
    user = apps.get_model("users", "User")
    chapter = apps.get_model("chapters", "Chapter")
    role = apps.get_model("users", "UserRoleChange")
    status = apps.get_model("users", "UserStatusChange")
    file_path = "secrets/20180725_all_all.CSV"
    with open(file_path, 'r') as csv_file:
        reader = DictReader(csv_file)
        for row in reader:
            # print(row)
            if row['email'] == "":
                continue
            try:
                chapter_obj = chapter.objects.get(name=row['chapter'])
            except chapter.DoesNotExist:
                continue
            badge_number_val = row['badge_number']
            if badge_number_val != "":
                badge_number_val = int(badge_number_val)
            else:
                badge_number_val = row['id']
                if badge_number_val != "":
                    badge_number_val = int(badge_number_val)
                else:
                    badge_number_val = None
            user_id = f"{chapter_obj.greek}{badge_number_val}"
            try:
                user_obj = user.objects.get(user_id=user_id)
            except user.DoesNotExist:
                user_obj = None
            if user_obj is None:
                try:
                    user_obj = user.objects.get(username=row['email'])
                except user.DoesNotExist:
                    user_obj = None
            if user_obj is None:
                phone_number_val = row['phone_number']
                if phone_number_val != "":
                    phone_number_val = int(phone_number_val)
                graduation_year_val = int(row['graduation_year'])
                user_obj = user(
                    # id=id_obj,
                    user_id=user_id,
                    username=row['email'],
                    first_name=row['first_name'],
                    last_name=row['last_name'],
                    email=row['email'],
                    name=f"{row['first_name']} {row['last_name']}",
                    badge_number=badge_number_val,
                    major=row["major"],
                    graduation_year=graduation_year_val,
                    phone_number=phone_number_val,
                    chapter=chapter_obj,
                )
                user_obj.save()
                status_obj = status(
                    user=user_obj,
                    status=row["status"],
                    start=timezone.now(),
                    end=datetime.datetime(graduation_year_val, 7, 1)
                )
                status_obj.save()
            if row['role'] != "":
                if row['role'] == "Employer":
                    user_obj.employer = row['position']
                    user_obj.save()
                else:
                    # There is a role, but maybe no dates
                    if row['start'] != "":
                        start = datetime.datetime.strptime(row['start'], '%m/%d/%Y')
                    else:
                        start = timezone.now()
                    if row['end'] != "":
                        end = datetime.datetime.strptime(row['end'], '%m/%d/%Y')
                    else:
                        end = timezone.now() + timezone.timedelta(weeks=52)
                    try:
                        # We need to check if exact role already exists
                        role.objects.get(user=user_obj, role=row['role'],
                                         start=start, end=end)
                    except role.DoesNotExist:
                        role_obj = role(
                            user=user_obj,
                            role=row['role'],
                            start=start,
                            end=end
                        )
                        role_obj.save()
    me = user.objects.get(username='venturafranklin@gmail.com')
    me.is_superuser = True
    me.is_staff = True
    me.save()

    #This did not work for some reason
    # nat_group, created = Group.objects.get_or_create(name='natoff')
    # off_group, created = Group.objects.get_or_create(name='officer')
    # file_path = r"secrets/natoff.csv"
    # with open(file_path, 'r') as csv_file:
    #     reader = DictReader(csv_file)
    #     for row in reader:
    #         print("OFFICER", row)
    #         try:
    #             user_obj = user.objects.get(email=row["Email"])
    #         except user.DoesNotExist:
    #             user_obj = None
    #         if user_obj is not None:
    #             off_group.user_set.add(user_obj)
    #             nat_group.user_set.add(user_obj)
    #             continue
    #         try:
    #             user_obj = user.objects.get(
    #                 first_name=row["First Name"],
    #                 last_name=row["Last Name"])
    #         except user.DoesNotExist:
    #             user_obj = None
    #         if user_obj is not None:
    #             off_group.user_set.add(user_obj)
    #             nat_group.user_set.add(user_obj)
    #             continue
    #         try:
    #             user_obj = user.objects.get(
    #                 last_name=row["Last Name"])
    #         except user.DoesNotExist:
    #             user_obj = None
    #         except user_obj.MultipleObjectsReturned:
    #             user_obj = None
    #             users = user.objects.filter(last_name=row["Last Name"])
    #             print(users)
    #         if user_obj is not None:
    #             off_group.user_set.add(user_obj)
    #             nat_group.user_set.add(user_obj)
    #             continue
    #         print("User not found", row)
    # all_users = user.objects.all()
    # for user_obj in all_users:
    #     if user_obj.is_chapter_officer():
    #         off_group.user_set.add(user_obj)


def delete(apps, schema_editor):
    Group.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0008_auto_20180725_2036'),
        ('chapters', '0004_initial_chapters_data'),
    ]

    operations = [
        migrations.RunPython(load_alumni, delete),
    ]
